name: Tag Revision

on:
  pull_request:
    types: [closed]  # Trigger when a pull request is closed

jobs:
  check-merge-and-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    outputs:
      tag: ${{ steps.label-check.outputs.tag }}
    steps:
      - name: Check for specific labels
        id: label-check
        run: |
          echo "Checking for labels..."
          LABELS=$(echo '${{ toJson(github.event.pull_request.labels.*.name) }}' | jq -r '.[]')
          AUTO_UPDATE_LABEL=$(echo "$LABELS" | grep -w "auto-update" || true)
          TEMPLATE_CHANGE_LABEL=$(echo "$LABELS" | grep -w "template-change" || true)

          echo "Found labels: $LABELS"

          if [[ -n "$AUTO_UPDATE_LABEL" && -n "$TEMPLATE_CHANGE_LABEL" ]]; then
            echo "Both 'auto-update' and 'template-change' labels found. Proceeding with tagging."
            echo "tag=true" >> "$GITHUB_OUTPUT"
          else
            echo "Required labels not found. Skipping tagging."
            echo "tag=false" >> "$GITHUB_OUTPUT"
          fi

  tag-version:
    runs-on: ubuntu-latest
    needs: check-merge-and-label
    if: needs.check-merge-and-label.outputs.tag == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Get Last Commit Date of the PR
        id: last-pr-commit-date
        run: |
          # Assuming the PR was merged into the default branch (e.g., main or master)
          # Fetch the date of the last commit on the PR branch before the merge
          PR_LAST_COMMIT_DATE=$(git log -1 --format=%cI)
          echo "Last PR commit date: $PR_LAST_COMMIT_DATE"
          echo "date=$PR_LAST_COMMIT_DATE" >> "$GITHUB_OUTPUT"

      - name: Tag New Version with PR Last Commit Date
        run: |
          # Use the date of the last PR commit for the tag
          TAG_DATE=$(date -u -d "${{ steps.last-pr-commit-date.outputs.date }}" +"%Y.%m.%d")
          NEW_TAG="v$TAG_DATE"
          echo "Creating new tag: $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG